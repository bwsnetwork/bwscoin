// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: verifier.proto

#include "verifier.pb.h"
#include "verifier.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pai {
namespace pouw {
namespace verification {

static const char* Verifier_method_names[] = {
  "/pai.pouw.verification.Verifier/Verify",
};

std::unique_ptr< Verifier::Stub> Verifier::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Verifier::Stub> stub(new Verifier::Stub(channel));
  return stub;
}

Verifier::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Verify_(Verifier_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Verifier::Stub::Verify(::grpc::ClientContext* context, const ::pai::pouw::verification::Request& request, ::pai::pouw::verification::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pai::pouw::verification::Response>* Verifier::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::pai::pouw::verification::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pai::pouw::verification::Response>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pai::pouw::verification::Response>* Verifier::Stub::PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::pai::pouw::verification::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pai::pouw::verification::Response>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, false);
}

Verifier::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Verifier_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Verifier::Service, ::pai::pouw::verification::Request, ::pai::pouw::verification::Response>(
          std::mem_fn(&Verifier::Service::Verify), this)));
}

Verifier::Service::~Service() {
}

::grpc::Status Verifier::Service::Verify(::grpc::ServerContext* context, const ::pai::pouw::verification::Request* request, ::pai::pouw::verification::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pai
}  // namespace pouw
}  // namespace verification

